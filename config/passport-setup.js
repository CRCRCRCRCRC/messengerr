const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const User = require('../models/User'); // Adjust path if needed

// Serialize user ID into the session
passport.serializeUser((user, done) => {
    done(null, user.id); // Store only the user ID in the session
});

// Deserialize user from the session using the ID
passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findById(id);
        done(null, user); // Attach the user object to req.user
    } catch (err) {
        done(err, null);
    }
});

// Configure Google OAuth 2.0 Strategy
passport.use(
    new GoogleStrategy({
        clientID: process.env.GOOGLE_CLIENT_ID,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET,
        callbackURL: process.env.CALLBACK_URL, // Must match Google Cloud Console setup
        scope: ['profile', 'email'] // Request access to profile and email
    },
    async (accessToken, refreshToken, profile, done) => {
        // This function is called after successful Google authentication
        try {
            // Find if the user already exists based on their Google ID
            let currentUser = await User.findOne({ googleId: profile.id });

            if (currentUser) {
                // User already exists, log them in
                // Optionally update details like avatar or display name if they changed
                let updated = false;
                const googleAvatar = (profile.photos && profile.photos.length > 0) ? profile.photos[0].value : null;
                if (googleAvatar && currentUser.avatarUrl !== googleAvatar) {
                    currentUser.avatarUrl = googleAvatar;
                    updated = true;
                }
                 if (profile.displayName && currentUser.displayName !== profile.displayName) {
                    currentUser.displayName = profile.displayName;
                    updated = true;
                 }
                 if (updated) {
                    await currentUser.save();
                 }
                console.log('Existing user logged in:', currentUser.email);
                done(null, currentUser); // Pass the existing user to Passport
            } else {
                // User is new, create a new user record
                console.log('Creating new user...');
                const newUser = new User({
                    googleId: profile.id,
                    email: profile.emails[0].value, // Google provides email
                    displayName: profile.displayName, // Google display name
                    avatarUrl: (profile.photos && profile.photos.length > 0) ? profile.photos[0].value : null,
                    // nickname will be null by default
                    // userCode will be generated by default
                    // isNicknameSet will be false by default
                });
                await newUser.save(); // Save the new user to the database
                console.log('New user created:', newUser.email, 'UserCode:', newUser.userCode);
                done(null, newUser); // Pass the newly created user to Passport
            }
        } catch (err) {
            console.error("Error during Google Strategy execution:", err);
            done(err, null); // Pass error to Passport
        }
    })
);
